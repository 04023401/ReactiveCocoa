/// Represents an action that will perform side effects or a transformation when
/// executed with an input.
///
/// Actions enforce serial execution. Any attempt to execute an action multiple
/// times concurrently will return an error.
public final class Action<Input, Output> {
	/// A signal of all values generated from applications of the Action.
	///
	/// In other words, this will send every value from every signal generated
	/// by each Plan returned from apply().
	public let values: Signal<Output>

	/// A signal of all errors generated from applications of the Action,
	/// _except_ `RACAction.ActionNotEnabled` errors.
	///
	/// In other words, this will send errors from every signal generated by
	/// each Plan returned from apply().
	public let errors: Signal<NSError>

	/// Whether the action is currently executing.
	///
	/// This plan creates signals that will send the current value immediately
	/// (if the action is alive), and complete when the action has
	/// deinitialized.
	public let executing: Plan<Bool>

	/// Whether the action is currently enabled.
	///
	/// This plan creates signals that will send the current value immediately
	/// (if the action is alive), and complete when the action has
	/// deinitialized.
	public let enabled: Plan<Bool>

	/// Initializes an action that will create a Plan for each input.
	///
	/// Before `enabledIf` sends a value, the action will be disabled.
	public init(enabledIf: Plan<Bool> = .single(true), _ execute: Input -> Plan<Output>)

	/// Creates a Plan for a Signal that will execute the action with the given
	/// input, then forward the results.
	///
	/// If the action is disabled when a signal from the returned plan is
	/// started, the signal will send an `NSError` corresponding to
	/// `RACError.ActionNotEnabled`, and nothing will be sent upon `values` or
	/// `errors` for that particular signal.
	public func apply(input: Input) -> Plan<Output>
}
